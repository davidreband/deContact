const e=location.pathname.split("/").slice(0,-1).join("/"),r=[e+"/_app/immutable/entry/app.JhXazhvE.js",e+"/_app/immutable/nodes/0.lrbfdbHk.js",e+"/_app/immutable/assets/0.B_UCzKno.css",e+"/_app/immutable/nodes/1.PuvJOoz0.js",e+"/_app/immutable/nodes/2.2Icra94l.js",e+"/_app/immutable/assets/2.ZuyJ5xuZ.css",e+"/_app/immutable/chunks/index.StEWW45A.js",e+"/_app/immutable/chunks/index.q4gTVGiB.js",e+"/_app/immutable/chunks/net-operations.QW5LqaDy.js",e+"/_app/immutable/chunks/scheduler.GMW1B6D0.js",e+"/_app/immutable/chunks/singletons.h80Vi8Sj.js",e+"/_app/immutable/entry/start.g7OWe6c0.js"],p=[e+"/favicon.png",e+"/manifest.json"],u="1704617868604",o=`cache-${u}`,i=[...r,...p];self.addEventListener("install",s=>{console.log("service worker install");async function n(){const t=await caches.open(o);console.log("addFilesToCache",i),await t.addAll(i)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const t of await caches.keys())t!==o&&await caches.delete(t)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const t=new URL(s.request.url),c=await caches.open(o);if(i.includes(t.pathname)){const a=await c.match(t.pathname);if(a)return a}try{const a=await fetch(s.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&c.put(s.request,a.clone()),a}catch(a){const l=await c.match(s.request);if(l)return l;throw a}}s.respondWith(n())});
